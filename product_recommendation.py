import streamlit as st
import pandas as pd
import pickle
import re
import matplotlib.pyplot as plt

# Function to get recommendations based on cosine similarity
def get_recommendations(df, ma_san_pham, cosine_sim, nums=5):
    # Ensure product IDs match the indices of cosine similarity matrix
    # Find the index of the selected product in df_products
    idx = df.index[df['ma_san_pham'] == ma_san_pham].tolist()
    
    if not idx:
        print(f"No product found with ID: {ma_san_pham}")
        return pd.DataFrame()  # Return an empty DataFrame
    
    idx = idx[0]  # Get the first index if there are multiple matches
    
    # Ensure that the index is within the bounds of the cosine similarity matrix
    if idx >= len(cosine_sim):
        print(f"Index {idx} is out of bounds for cosine similarity matrix.")
        return pd.DataFrame()  # Return an empty DataFrame if index is out of bounds
    
    # Get cosine similarity scores for the selected product
    sim_scores = list(enumerate(cosine_sim[idx]))
    
    # Sort products based on similarity scores in descending order
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    
    # Exclude the first product as it's the same one we selected
    sim_scores = sim_scores[1:nums+1]
    
    # Extract the indices of the most similar products
    product_indices = [i[0] for i in sim_scores]
    
    # Return the recommended products
    return df.iloc[product_indices]

def display_recommended_products(recommended_products,df_output,cols=5):
    for i in range(0, len(recommended_products), cols):
        columns = st.columns(cols)
        for j, col in enumerate(columns):
            if i + j < len(recommended_products):
                product = recommended_products.iloc[i + j]
                with col:
                    with st.container(border=True):
                        st.image(product['hinh_anh'])
                        st.write(product['ten_san_pham'])
                        st.write("M√£ s·∫£n ph·∫©m :",product['ma_san_pham'])
                        st.write("Gi√° :",product['gia_ban'],' VNƒê')
                        st.write("Sao :",product['diem_trung_binh'],' ‚≠ê')
                        luotmua = df_output[df_output['ma_san_pham']==product['ma_san_pham']].groupby('ma_san_pham',as_index=False)['ma_khach_hang'].count()
                        if len(luotmua) > 0:
                            st.write("L∆∞·ª£t mua: ", luotmua['ma_khach_hang'][0]," üõí")
                        else:
                            st.write("L∆∞·ª£t mua: 0 üõí")
                        expander=st.expander("M√¥ t·∫£")
                        truncated_description = ' '.join(product['mo_ta'].split()[:100]) + '...'
                        expander.write(truncated_description)

# Read data
df_products = pd.read_csv('data/Product.csv')
df_customer = pd.read_csv('data/Customer.csv')
df_output = pd.read_csv('data/Danh_gia1.csv')

# Load precomputed cosine similarity
with open('process/products_cosine_sim_.pkl', 'rb') as f:
    cosine_sim_new = pickle.load(f)

###### Streamlit Interface ######

    # GUI
st.title("Data Science Project")
st.write("## Product Recommendation")

menu = ["Business Objective", "Login", "Recommend Product"]
choice = st.sidebar.selectbox('Menu', menu)
st.sidebar.write("""#### Th√†nh vi√™n th·ª±c hi·ªán:\n
                Tr·∫ßn ƒêƒÉng Di·ªáp & V≈© Th·ªã Thanh Tr√∫c""")
st.sidebar.write("""#### Gi·∫£ng vi√™n h∆∞·ªõng d·∫´n: 
                        Khu·∫•t Th√πy Ph∆∞∆°ng""")
st.sidebar.write("""#### Th·ªùi gian th·ª±c hi·ªán: 7/12/2024""")
if choice == 'Business Objective':    
    st.subheader("Business Objective")
    st.write("""
    ###### V·∫•n ƒë·ªÅ : M·ªôt khi ƒë√£ hi·ªÉu ƒë∆∞·ª£c kh√°ch h√†ng v√† nhu c·∫ßu c·ªßa h·ªç, ch√∫ng ta x√¢y d·ª±ng ƒë∆∞·ª£c 1 h·ªá th·ªëng g·ª£i √Ω th√¥ng minh mang nh·ªØng s·∫£n ph·∫©m ph√π h·ª£p ƒë·∫øn v·ªõi kh√°ch h√†ng, t·ª´ ƒë√≥ n√¢ng cao doanh s·ªë v√† tr·∫£i nghi·ªám ng∆∞·ªùi d√πng.
    """)  
    st.write("""###### => Y√™u c·∫ßu: X√¢y d·ª±ng thu·∫≠t to√°n ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m d·ª±a tr√™n l·ªãch s·ª≠ mua h√†ng.""")
    st.image('images/hasaki_banner_2.jpg', use_container_width=True)
    


elif choice == 'Login':
    user_credentials = {
        "Ho√†ng Anh Tr·∫ßn": "password1",
        "Nguy·ªÖn L∆∞∆°ng Nhi Ph∆∞∆°ng": "password2",
        "Nguy·ªÖn Thu Trang": "password3"
    }

    # Giao di·ªán ƒëƒÉng nh·∫≠p
    st.title("ƒêƒÉng nh·∫≠p")

    # Hi·ªÉn th·ªã danh s√°ch t√†i kho·∫£n g·ª£i √Ω
    selected_username = st.selectbox("Ch·ªçn t√†i kho·∫£n", options=list(user_credentials.keys()), help="Ch·ªçn t√†i kho·∫£n t·ª´ danh s√°ch g·ª£i √Ω.")
    # L·∫•y m·∫≠t kh·∫©u t∆∞∆°ng ·ª©ng t·ª´ dictionary
    selected_password = user_credentials[selected_username]

    # T·ª± ƒë·ªông ƒëi·ªÅn m·∫≠t kh·∫©u (hi·ªÉn th·ªã d∆∞·ªõi d·∫°ng b·∫£o m·∫≠t)
    password = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u", value=selected_password, type="password")

    # G·ª£i √Ω cho ng∆∞·ªùi d√πng
    st.info("M·∫≠t kh·∫©u t·ª± ƒë·ªông ƒë∆∞·ª£c ƒëi·ªÅn theo t√†i kho·∫£n ƒë√£ ch·ªçn.")
    
    
    if "logged_in" not in st.session_state:
        st.session_state["logged_in"] = False

    if st.session_state["logged_in"]:
        st.success(f"Ch√†o m·ª´ng {selected_username}! B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i")

        # N√∫t ƒëƒÉng xu·∫•t
        if st.button("ƒêƒÉng xu·∫•t"):
            st.session_state["logged_in"] = False
            st.rerun()
    else:
        # N√∫t ƒëƒÉng nh·∫≠p
        if st.button("ƒêƒÉng nh·∫≠p"):
            # X√°c th·ª±c t√†i kho·∫£n v√† m·∫≠t kh·∫©u
            if user_credentials.get(selected_username) == password:
                st.session_state["logged_in"] = True
                st.success(f"Ch√†o m·ª´ng {selected_username}! B·∫°n ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng.")
                # st.experimental_rerun()

                # l·∫•y id
                get_id = df_customer[df_customer['ho_ten']==selected_username]['ma_khach_hang'].reset_index(drop='index')[0]
                # # t·ª´ id ƒë√£ c√≥ , l·∫•y s·∫£n ph·∫©m
                customer_products = df_output[df_output['ma_khach_hang'] == get_id]['ma_san_pham'].tolist()
                if customer_products:
                    st.write("### S·∫£n ph·∫©m ƒë√£ mua:")
                    purchased_products = df_products[df_products['ma_san_pham'].isin(customer_products)]
                    st.write(purchased_products[['ma_san_pham', 'ten_san_pham']])

                    st.write("### G·ª£i √Ω s·∫£n ph·∫©m li√™n quan:")
                    all_recommendations = pd.DataFrame()
                    for product_id in customer_products:
                        recommendations = get_recommendations(df_products, product_id, cosine_sim=cosine_sim_new, nums=3)
                        recommendations = recommendations[recommendations['diem_trung_binh'] >= 4]
                        all_recommendations = pd.concat([all_recommendations, recommendations])

                    all_recommendations = all_recommendations.drop_duplicates(subset='ma_san_pham')
                    all_recommendations = all_recommendations[~all_recommendations['ma_san_pham'].isin(customer_products)]
                    display_recommended_products(all_recommendations,df_output, cols=3)
                else:
                    st.info(f"Kh√°ch h√†ng **{selected_username}** ch∆∞a mua s·∫£n ph·∫©m n√†o.")
            else:
                st.error("T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!")
           
          



    

elif choice == 'Recommend Product':
    # Step 2: Select a product and get similar product recommendations
    st.write("---")
    st.write("## G·ª£i √Ω s·∫£n ph·∫©m t∆∞∆°ng t·ª±")

    if 'random_products' not in st.session_state:
        st.session_state.random_products = df_products.head(n=10)

    product_options = [
        (row['ten_san_pham'], row['ma_san_pham'])
        for _, row in st.session_state.random_products.iterrows()
    ]

    selected_product = st.selectbox(
        "Ch·ªçn s·∫£n ph·∫©m",
        options=product_options,
        format_func=lambda x: x[0]
    )

    st.write("B·∫°n ƒë√£ ch·ªçn:", selected_product)
    st.session_state.selected_ma_san_pham = selected_product[1]

    if st.session_state.selected_ma_san_pham:
        selected_product_df = df_products[df_products['ma_san_pham'] == st.session_state.selected_ma_san_pham]

        if not selected_product_df.empty:
            st.write('#### B·∫°n v·ª´a ch·ªçn:')
            st.write('### ', selected_product_df['ten_san_pham'].values[0])

            product_description = selected_product_df['mo_ta'].values[0]
            st.image(selected_product_df['hinh_anh'].values[0])
            truncated_description = ' '.join(product_description.split()[:100])
            st.write('##### Th√¥ng tin:')
            st.write(truncated_description, '...')
            st.write('#### Gi√° :',selected_product_df['gia_ban'].values[0],' VNƒê')
            st.write('#### Sao :',selected_product_df['diem_trung_binh'].values[0],' ‚≠ê')
            luotmua = df_output[df_output['ma_san_pham']==selected_product_df['ma_san_pham'].values[0]].groupby('ma_san_pham',as_index=False)['ma_khach_hang'].count()
            if len(luotmua) > 0:
                st.write("### L∆∞·ª£t mua: ", luotmua['ma_khach_hang'][0]," üõí")
            else:
                st.write("### L∆∞·ª£t mua: 0 üõí")
            st.write("## ƒê√°nh gi√° ")
            #get product code
            msp = selected_product_df['ma_san_pham'].values[0]
            # V·∫Ω bi·ªÉu ƒë·ªì
            paint = df_output[df_output['ma_san_pham']==msp].groupby('so_sao',as_index=False)['ma_khach_hang'].count()
            paint.rename(columns={"ma_khach_hang":"tong_so_luong"}, inplace=True)
            with st.container(border=True):
                st.write("T·ªïng s·ªë sao ƒë∆∞·ª£c vote t·ª´ kh√°ch h√†ng")
                st.bar_chart(paint, x="so_sao", y="tong_so_luong", horizontal=True)
            st.write("### C√°c b√¨nh lu·∫≠n c·ªßa kh√°ch h√†ng ")
            for i in range(0,3):
                with st.container(border=True):
                    # get m√£ kh√°ch h√†ng
                    mkh = df_output[df_output['ma_san_pham']==msp]['ma_khach_hang'].values[i]
                    # Write
                    st.write("Kh√°ch h√†ng : ",df_customer[df_customer['ma_khach_hang']==mkh]['ho_ten'].values[0])
                    st.write("B√¨nh Lu·∫≠n  : ",df_output[df_output['ma_san_pham']==msp]['noi_dung_binh_luan'].values[i])
                    st.write("Vote : ",df_output[df_output['ma_san_pham']==msp]['so_sao'].values[i],' ‚≠ê')
                    st.write("Ng√†y b√¨nh lu·∫≠n : ",df_output[df_output['ma_san_pham']==msp]['ngay_binh_luan'].values[i])
            st.write('##### C√°c s·∫£n ph·∫©m li√™n quan:')
            recommendations = get_recommendations(
                df_products,
                st.session_state.selected_ma_san_pham,
                cosine_sim=cosine_sim_new,
                nums=3
            )
            display_recommended_products(recommendations,df_output, cols=3)
        else:
            st.write(f"Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: {st.session_state.selected_ma_san_pham}")
